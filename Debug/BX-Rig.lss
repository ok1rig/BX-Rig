
BX-Rig.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000263  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000193  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026b  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000114  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020c  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 */ 

#include <avr/io.h>
#include "hd44780.h"

void lcd_init(void) {
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
	DATA_DDR |= (1 << DATA);
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	a4 d0       	rcall	.+328    	; 0x18a <main>
  42:	fb c0       	rjmp	.+502    	; 0x23a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <dds_clk_pulse>:
void dds_spi_byte(unsigned char d) {	
	for (int loop=1; loop != 8; loop++) {
		if (d & 0x01) 
			DDS_DATA_PORT |= (1 << DDS_DATA);
		else
			DDS_DATA_PORT &= (0 << DDS_DATA);
  46:	cf 93       	push	r28
  48:	df 93       	push	r29
		d >>= 1;
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62
  4e:	8a e2       	ldi	r24, 0x2A	; 42
		dds_clk_pulse();
  50:	90 e0       	ldi	r25, 0x00	; 0
	return DDS_TUNING_WORD_MAX * hz / DDS_REF_FREQ;
}


void dds_spi_byte(unsigned char d) {	
	for (int loop=1; loop != 8; loop++) {
  52:	2a e2       	ldi	r18, 0x2A	; 42
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	f9 01       	movw	r30, r18
  58:	20 81       	ld	r18, Z
  5a:	20 62       	ori	r18, 0x20	; 32
  5c:	fc 01       	movw	r30, r24
  5e:	20 83       	st	Z, r18
  60:	8a e2       	ldi	r24, 0x2A	; 42
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	fc 01       	movw	r30, r24
		else
			DDS_DATA_PORT &= (0 << DDS_DATA);
		d >>= 1;
		dds_clk_pulse();
	}
}
  66:	80 81       	ld	r24, Z
  68:	8a e2       	ldi	r24, 0x2A	; 42
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	fc 01       	movw	r30, r24
  6e:	10 82       	st	Z, r1
  70:	df 91       	pop	r29


void dds_clk_pulse(void) {
	DDS_W_CLK_PORT |= (1 << DDS_W_CLK);
	DDS_W_CLK_PORT &= (0 << DDS_W_CLK);	
}
  72:	cf 91       	pop	r28
  74:	08 95       	ret

00000076 <dds_fq_ud_pulse>:

void dds_fq_ud_pulse(void) {
  76:	cf 93       	push	r28
  78:	df 93       	push	r29
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
	DDS_FQ_UD_PORT |= (1 << DDS_FQ_UD);
  7e:	8b e2       	ldi	r24, 0x2B	; 43
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	2b e2       	ldi	r18, 0x2B	; 43
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	f9 01       	movw	r30, r18
  88:	20 81       	ld	r18, Z
  8a:	20 64       	ori	r18, 0x40	; 64
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
	DDS_FQ_UD_PORT &= (0 << DDS_FQ_UD);	
  90:	8b e2       	ldi	r24, 0x2B	; 43
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	fc 01       	movw	r30, r24
  96:	80 81       	ld	r24, Z
  98:	8b e2       	ldi	r24, 0x2B	; 43
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	fc 01       	movw	r30, r24
  9e:	10 82       	st	Z, r1
}
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <dds_init>:

void dds_init(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	//set IO pins to OUT
	DDS_W_CLK_DDR |= (1 << DDS_W_CLK);
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e2       	ldi	r18, 0x2A	; 42
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	20 62       	ori	r18, 0x20	; 32
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	DDS_FQ_UD_DDR |= (1 << DDS_FQ_UD);
  c0:	8a e2       	ldi	r24, 0x2A	; 42
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2a e2       	ldi	r18, 0x2A	; 42
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	20 64       	ori	r18, 0x40	; 64
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	DDS_DATA_DDR |= (1 << DDS_DATA);
  d2:	8a e2       	ldi	r24, 0x2A	; 42
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2a e2       	ldi	r18, 0x2A	; 42
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 68       	ori	r18, 0x80	; 128
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	
	// All set to LOW
	DDS_W_CLK_PORT &= (0 << DDS_W_CLK);
  e4:	8a e2       	ldi	r24, 0x2A	; 42
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	10 82       	st	Z, r1
	DDS_FQ_UD_PORT &= (0 << DDS_FQ_UD);
  f4:	8b e2       	ldi	r24, 0x2B	; 43
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	80 81       	ld	r24, Z
  fc:	8b e2       	ldi	r24, 0x2B	; 43
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	10 82       	st	Z, r1
	DDS_DATA_PORT &= (0 << DDS_DATA);
 104:	8b e2       	ldi	r24, 0x2B	; 43
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	8b e2       	ldi	r24, 0x2B	; 43
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
	
	dds_clk_pulse();
 114:	98 df       	rcall	.-208    	; 0x46 <dds_clk_pulse>
	dds_fq_ud_pulse();
 116:	af df       	rcall	.-162    	; 0x76 <dds_fq_ud_pulse>
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <dds_freq2word>:


unsigned long int dds_freq2word(long int hz) {	
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <dds_freq2word+0x6>
 124:	00 d0       	rcall	.+0      	; 0x126 <dds_freq2word+0x8>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	69 83       	std	Y+1, r22	; 0x01
 12c:	7a 83       	std	Y+2, r23	; 0x02
 12e:	8b 83       	std	Y+3, r24	; 0x03
 130:	9c 83       	std	Y+4, r25	; 0x04
	return DDS_TUNING_WORD_MAX * hz / DDS_REF_FREQ;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	ab 81       	ldd	r26, Y+3	; 0x03
 138:	bc 81       	ldd	r27, Y+4	; 0x04
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	aa 1f       	adc	r26, r26
 158:	bb 1f       	adc	r27, r27
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	aa 1f       	adc	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	20 e4       	ldi	r18, 0x40	; 64
 164:	39 e5       	ldi	r19, 0x59	; 89
 166:	43 e7       	ldi	r20, 0x73	; 115
 168:	57 e0       	ldi	r21, 0x07	; 7
 16a:	bc 01       	movw	r22, r24
 16c:	cd 01       	movw	r24, r26
 16e:	28 d0       	rcall	.+80     	; 0x1c0 <__divmodsi4>
 170:	da 01       	movw	r26, r20
 172:	c9 01       	movw	r24, r18
 174:	22 e0       	ldi	r18, 0x02	; 2
 176:	82 27       	eor	r24, r18
}
 178:	bc 01       	movw	r22, r24
 17a:	cd 01       	movw	r24, r26
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <main>:

#include <avr/io.h>
#include "ad9850.h"

int main(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <main+0x6>
 190:	00 d0       	rcall	.+0      	; 0x192 <main+0x8>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	unsigned long int x;
	
	dds_init();
 196:	87 df       	rcall	.-242    	; 0xa6 <dds_init>
	x = dds_freq2word(7000001);
 198:	61 ec       	ldi	r22, 0xC1	; 193
 19a:	7f ec       	ldi	r23, 0xCF	; 207
 19c:	8a e6       	ldi	r24, 0x6A	; 106
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	be df       	rcall	.-132    	; 0x11e <dds_freq2word>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	ab 83       	std	Y+3, r26	; 0x03
 1ac:	bc 83       	std	Y+4, r27	; 0x04
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
	x += 0; 
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <__divmodsi4>:
 1c0:	05 2e       	mov	r0, r21
 1c2:	97 fb       	bst	r25, 7
 1c4:	16 f4       	brtc	.+4      	; 0x1ca <__divmodsi4+0xa>
 1c6:	00 94       	com	r0
 1c8:	06 d0       	rcall	.+12     	; 0x1d6 <__divmodsi4_neg1>
 1ca:	57 fd       	sbrc	r21, 7
 1cc:	0c d0       	rcall	.+24     	; 0x1e6 <__divmodsi4_neg2>
 1ce:	13 d0       	rcall	.+38     	; 0x1f6 <__udivmodsi4>
 1d0:	07 fc       	sbrc	r0, 7
 1d2:	09 d0       	rcall	.+18     	; 0x1e6 <__divmodsi4_neg2>
 1d4:	7e f4       	brtc	.+30     	; 0x1f4 <__divmodsi4_exit>

000001d6 <__divmodsi4_neg1>:
 1d6:	90 95       	com	r25
 1d8:	80 95       	com	r24
 1da:	70 95       	com	r23
 1dc:	61 95       	neg	r22
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	8f 4f       	sbci	r24, 0xFF	; 255
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	08 95       	ret

000001e6 <__divmodsi4_neg2>:
 1e6:	50 95       	com	r21
 1e8:	40 95       	com	r20
 1ea:	30 95       	com	r19
 1ec:	21 95       	neg	r18
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	4f 4f       	sbci	r20, 0xFF	; 255
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255

000001f4 <__divmodsi4_exit>:
 1f4:	08 95       	ret

000001f6 <__udivmodsi4>:
 1f6:	a1 e2       	ldi	r26, 0x21	; 33
 1f8:	1a 2e       	mov	r1, r26
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	fd 01       	movw	r30, r26
 200:	0d c0       	rjmp	.+26     	; 0x21c <__udivmodsi4_ep>

00000202 <__udivmodsi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	ee 1f       	adc	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	a2 17       	cp	r26, r18
 20c:	b3 07       	cpc	r27, r19
 20e:	e4 07       	cpc	r30, r20
 210:	f5 07       	cpc	r31, r21
 212:	20 f0       	brcs	.+8      	; 0x21c <__udivmodsi4_ep>
 214:	a2 1b       	sub	r26, r18
 216:	b3 0b       	sbc	r27, r19
 218:	e4 0b       	sbc	r30, r20
 21a:	f5 0b       	sbc	r31, r21

0000021c <__udivmodsi4_ep>:
 21c:	66 1f       	adc	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	1a 94       	dec	r1
 226:	69 f7       	brne	.-38     	; 0x202 <__udivmodsi4_loop>
 228:	60 95       	com	r22
 22a:	70 95       	com	r23
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	bd 01       	movw	r22, r26
 236:	cf 01       	movw	r24, r30
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
