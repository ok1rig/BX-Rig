
BX-Rig.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001cc  00000000  00000000  00000a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000139  00000000  00000000  00000c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000194  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f9  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d1  00000000  00000000  00001135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	fb c0       	rjmp	.+502    	; 0x23a <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:

#include <avr/io.h>
#include "dds.h"

int main(void)
{
  46:	cf 93       	push	r28
  48:	df 93       	push	r29
  4a:	00 d0       	rcall	.+0      	; 0x4c <main+0x6>
  4c:	00 d0       	rcall	.+0      	; 0x4e <main+0x8>
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
	unsigned long int x;
	
	dds_init();
  52:	44 d0       	rcall	.+136    	; 0xdc <dds_init>
	x = dds_freq2word(7000001);
  54:	61 ec       	ldi	r22, 0xC1	; 193
  56:	7f ec       	ldi	r23, 0xCF	; 207
  58:	8a e6       	ldi	r24, 0x6A	; 106
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	7b d0       	rcall	.+246    	; 0x154 <dds_freq2word>
  5e:	dc 01       	movw	r26, r24
  60:	cb 01       	movw	r24, r22
  62:	89 83       	std	Y+1, r24	; 0x01
  64:	9a 83       	std	Y+2, r25	; 0x02
  66:	ab 83       	std	Y+3, r26	; 0x03
  68:	bc 83       	std	Y+4, r27	; 0x04
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
	x += 0; 
  6e:	0f 90       	pop	r0
  70:	0f 90       	pop	r0
  72:	0f 90       	pop	r0
  74:	0f 90       	pop	r0
  76:	df 91       	pop	r29
  78:	cf 91       	pop	r28
  7a:	08 95       	ret

0000007c <dds_clk_pulse>:
 */ 
#include <avr/io.h>
#include "dds.h"


void dds_clk_pulse(void) {
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	W_CLK_PORT |= (1 << W_CLK);
  84:	8a e2       	ldi	r24, 0x2A	; 42
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2a e2       	ldi	r18, 0x2A	; 42
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	f9 01       	movw	r30, r18
  8e:	20 81       	ld	r18, Z
  90:	20 62       	ori	r18, 0x20	; 32
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	W_CLK_PORT &= (0 << W_CLK);	
  96:	8a e2       	ldi	r24, 0x2A	; 42
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	fc 01       	movw	r30, r24
  9c:	80 81       	ld	r24, Z
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc 01       	movw	r30, r24
  a4:	10 82       	st	Z, r1
}
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <dds_fq_ud_pulse>:

void dds_fq_ud_pulse(void) {
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
	FQ_UD_PORT |= (1 << FQ_UD);
  b4:	8b e2       	ldi	r24, 0x2B	; 43
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2b e2       	ldi	r18, 0x2B	; 43
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	20 64       	ori	r18, 0x40	; 64
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	FQ_UD_PORT &= (0 << FQ_UD);	
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	8b e2       	ldi	r24, 0x2B	; 43
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <dds_init>:

void dds_init(void) {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	//set IO pins to OUT
	W_CLK_DDR |= (1 << W_CLK);
  e4:	8a e2       	ldi	r24, 0x2A	; 42
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2a e2       	ldi	r18, 0x2A	; 42
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	20 62       	ori	r18, 0x20	; 32
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	FQ_UD_DDR |= (1 << FQ_UD);
  f6:	8a e2       	ldi	r24, 0x2A	; 42
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2a e2       	ldi	r18, 0x2A	; 42
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	20 64       	ori	r18, 0x40	; 64
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	DATA_DDR |= (1 << DATA);
 108:	8a e2       	ldi	r24, 0x2A	; 42
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	2a e2       	ldi	r18, 0x2A	; 42
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	20 68       	ori	r18, 0x80	; 128
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	
	// All set to LOW
	W_CLK_PORT &= (0 << W_CLK);
 11a:	8a e2       	ldi	r24, 0x2A	; 42
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	8a e2       	ldi	r24, 0x2A	; 42
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	10 82       	st	Z, r1
	FQ_UD_PORT &= (0 << FQ_UD);
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	80 81       	ld	r24, Z
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	10 82       	st	Z, r1
	DATA_PORT &= (0 << DATA);
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	8b e2       	ldi	r24, 0x2B	; 43
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	10 82       	st	Z, r1
	
	dds_clk_pulse();
 14a:	98 df       	rcall	.-208    	; 0x7c <dds_clk_pulse>
	dds_fq_ud_pulse();
 14c:	af df       	rcall	.-162    	; 0xac <dds_fq_ud_pulse>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <dds_freq2word>:


unsigned long int dds_freq2word(long int hz) {	
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	00 d0       	rcall	.+0      	; 0x15a <dds_freq2word+0x6>
 15a:	00 d0       	rcall	.+0      	; 0x15c <dds_freq2word+0x8>
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	69 83       	std	Y+1, r22	; 0x01
 162:	7a 83       	std	Y+2, r23	; 0x02
 164:	8b 83       	std	Y+3, r24	; 0x03
 166:	9c 83       	std	Y+4, r25	; 0x04
	return TUNING_WORD_MAX * hz / REF_FREQ;
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	9a 81       	ldd	r25, Y+2	; 0x02
 16c:	ab 81       	ldd	r26, Y+3	; 0x03
 16e:	bc 81       	ldd	r27, Y+4	; 0x04
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	aa 1f       	adc	r26, r26
 176:	bb 1f       	adc	r27, r27
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	20 e4       	ldi	r18, 0x40	; 64
 19a:	39 e5       	ldi	r19, 0x59	; 89
 19c:	43 e7       	ldi	r20, 0x73	; 115
 19e:	57 e0       	ldi	r21, 0x07	; 7
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	0d d0       	rcall	.+26     	; 0x1c0 <__divmodsi4>
 1a6:	da 01       	movw	r26, r20
 1a8:	c9 01       	movw	r24, r18
 1aa:	22 e0       	ldi	r18, 0x02	; 2
 1ac:	82 27       	eor	r24, r18
}
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <__divmodsi4>:
 1c0:	05 2e       	mov	r0, r21
 1c2:	97 fb       	bst	r25, 7
 1c4:	16 f4       	brtc	.+4      	; 0x1ca <__divmodsi4+0xa>
 1c6:	00 94       	com	r0
 1c8:	06 d0       	rcall	.+12     	; 0x1d6 <__divmodsi4_neg1>
 1ca:	57 fd       	sbrc	r21, 7
 1cc:	0c d0       	rcall	.+24     	; 0x1e6 <__divmodsi4_neg2>
 1ce:	13 d0       	rcall	.+38     	; 0x1f6 <__udivmodsi4>
 1d0:	07 fc       	sbrc	r0, 7
 1d2:	09 d0       	rcall	.+18     	; 0x1e6 <__divmodsi4_neg2>
 1d4:	7e f4       	brtc	.+30     	; 0x1f4 <__divmodsi4_exit>

000001d6 <__divmodsi4_neg1>:
 1d6:	90 95       	com	r25
 1d8:	80 95       	com	r24
 1da:	70 95       	com	r23
 1dc:	61 95       	neg	r22
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	8f 4f       	sbci	r24, 0xFF	; 255
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	08 95       	ret

000001e6 <__divmodsi4_neg2>:
 1e6:	50 95       	com	r21
 1e8:	40 95       	com	r20
 1ea:	30 95       	com	r19
 1ec:	21 95       	neg	r18
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	4f 4f       	sbci	r20, 0xFF	; 255
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255

000001f4 <__divmodsi4_exit>:
 1f4:	08 95       	ret

000001f6 <__udivmodsi4>:
 1f6:	a1 e2       	ldi	r26, 0x21	; 33
 1f8:	1a 2e       	mov	r1, r26
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	fd 01       	movw	r30, r26
 200:	0d c0       	rjmp	.+26     	; 0x21c <__udivmodsi4_ep>

00000202 <__udivmodsi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	ee 1f       	adc	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	a2 17       	cp	r26, r18
 20c:	b3 07       	cpc	r27, r19
 20e:	e4 07       	cpc	r30, r20
 210:	f5 07       	cpc	r31, r21
 212:	20 f0       	brcs	.+8      	; 0x21c <__udivmodsi4_ep>
 214:	a2 1b       	sub	r26, r18
 216:	b3 0b       	sbc	r27, r19
 218:	e4 0b       	sbc	r30, r20
 21a:	f5 0b       	sbc	r31, r21

0000021c <__udivmodsi4_ep>:
 21c:	66 1f       	adc	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	1a 94       	dec	r1
 226:	69 f7       	brne	.-38     	; 0x202 <__udivmodsi4_loop>
 228:	60 95       	com	r22
 22a:	70 95       	com	r23
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	bd 01       	movw	r22, r26
 236:	cf 01       	movw	r24, r30
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
